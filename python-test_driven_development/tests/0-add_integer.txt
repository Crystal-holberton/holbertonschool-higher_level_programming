===========================
How to Use 0-add_integer.py
===========================

"""
The addition of a and b, returns an integer
"""

Usage
=====

'' add_integer()'' returns the addition of its arguments. This means
numbers a and b value is eqivalent to using ''+'' operator.

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

::
    >>> add_integer(100, -2)
    98

::
    >>> add_integer(2)
    100

Reverts floating points to integers.

::
    >>> add_integer(100.3, -2)
    98

Non-numbers
===========

non-numbers throw TypeError exceptions.

::
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

::
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

::
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::
    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
