==============================
How to Use 2-matrix_divided.py
==============================

"""
Divides all elements of a matrix
"""

Usage
=====

''matrix_divided(...)'' returns a new matrix
where the ''matrix'' has all elements divided by ''div''

::
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
            [3, 6, 9],
            [12, 15, 18]
        ]
    >>> print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Quotients are rounded to a maximum of two decimal places

::
    >>> matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is unchanged

::
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

Function can handle floating-point numbers

::
    >>> matrix = [
            [1.1, -2.2, 3.3],
            [4.4, 5.5, -6.6]
        ]
    >>> print(matrix_divided(matrix, 3))
    [[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

Integers and floats can be combined

::
    >>> matrix = [
            [1, -2.2, 3, 4.4, 5],
            [-6.6, 7.00, 8, 9.999, 10]
        ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

Invalid Matrices
================

''matrix'' must be a list of lists consisting of ints/floats.
If it is not a list a TypeError is raised

::
    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::
    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

An empty list will raise a TypeError

::
    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

An empty list of lists will still succeed

::
    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

TypeError is raised if ''matrix'' is not a list of lists

::
    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

TypeError is raised if any element is neither an int or float

::
    >>> matrix = [
            [1, 2, 3],
            [4, "no number", 6]
        ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

New TypeError for rows of different sizes

::
    >>> matrix = [
            [1, 2, 3, 4],
            [5, 6, 7]
        ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same sizes

Invalid Division
================

''div'' must be an int or float, otherwise a TypeError is raised

::
    >>> matrix = [
            [1, 2, 3],
            [4, 5, 6]
        ]
    >>> print(matrix_divided(matrix, "no number"))
    Traceback (most recent call last):
    TypeError: div must be a number

::
    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

''div'' must be non-zero, otherwise a ZeroDivisionError is raised

::
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
